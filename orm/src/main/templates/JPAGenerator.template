/************************************************************/
/*
	File: JPAGenerator.java

	Template for JPA Mapping file.

	Author: James Cowan
*/
/************************************************************/

package org.jems.orm;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.List;

import org.jems.generator.GeneratorException;
import org.jems.orm.model.OrmConnection;
import org.jems.orm.model.OrmEntity;
import org.jems.orm.model.OrmProperty;

/************************************************************/

public class JPAGenerator extends ORMGenerator
{
	protected GeneratorUtils	m_generatorUtils;

	public JPAGenerator(File schemaDirectory, File schemaFile, File output) throws GeneratorException
	{
		super(schemaDirectory, schemaFile, output);
		
		m_generatorUtils = new GeneratorUtils();
	}

	/************************************************************/
	/** generate */

	public void generate(PrintStream out) throws IOException, GeneratorException
	{
		if (!m_schemaFile.exists())
		{
		String msg = m_schemaFile.getAbsolutePath()+" is missing";
		
			throw new GeneratorException(msg);		
		}
		
		if (!m_output.exists())
		{
		String msg = m_output.getAbsolutePath()+" is missing";
		
			throw new GeneratorException(msg);
		}
			
		m_log.info("Generate JPA classes to: "+m_output.getAbsolutePath());
				
		generateMapping(System.out);

	} // generate
	
	/************************************************************/
	/* protected methods */
	/************************************************************/
	/** generate */

	protected void generateMapping(PrintStream out) throws IOException, GeneratorException
	{
	OrmEntity ormEntities[] = m_orm.getOrmEntity();
	DBMetaData md = getDBMetaData();
		
		for (int count=0; count<ormEntities.length; count++)
		{
		OrmEntity ormEntity = ormEntities[count];
		
			m_log.info("Generate "+ormEntity.getClassName());
			
			try
			{
			String tableName = ormEntity.getTableName();
			List<OrmProperty> tablePropertyList = md.getOrmColumns(tableName); 
			JPAClass jpaClass = new JPAClass(m_orm, ormEntity, tablePropertyList);
			String className = ormEntity.getClassName();
			String simpleClassName = m_generatorUtils.getSimpleClassName(className);		
			String fileName = simpleClassName+".java";
			File file = new File(m_output, fileName);
			FileOutputStream fos = new FileOutputStream(file);
			PrintStream ps = new PrintStream(fos);
			
				jpaClass.generate(ps);
			}
			catch (GeneratorException e)
			{
				throw e;
			}
			catch (Exception ex)
			{
				ex.printStackTrace(System.out);
				throw new GeneratorException(ex.toString());
			}
		}

	} // generateMapping
	
	/************************************************************/
	/** getDBMetaData */

	protected DBMetaData getDBMetaData() throws GeneratorException
	{
	OrmConnection ormConnection = m_orm.getOrmConnection();
	
		if (ormConnection == null)
		{
			throw new GeneratorException("Missing connection details");
		}
		
		try
		{
			return new DBMetaData(ormConnection);
		}
		catch (Exception e)
		{
			throw new GeneratorException(e.getMessage());
		}
		
	} // getDBMetaData
	
} // JPAGenerator

/************************************************************/


