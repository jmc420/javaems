/************************************************************/
/*
	File: JPAClass.java

	Template for JPA Class mapping.

	Author: James Cowan
*/
/************************************************************/

package org.jems.orm;

import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.jems.generator.ClassMetaData;
import org.jems.generator.GeneratorException;

import org.jems.orm.model.Orm;
import org.jems.orm.model.OrmBasicProperty;
import org.jems.orm.model.OrmEntity;
import org.jems.orm.model.OrmId;
import org.jems.orm.model.OrmJoin;
import org.jems.orm.model.OrmAssociationProperty;
import org.jems.orm.model.OrmManyToManyProperty;
import org.jems.orm.model.OrmProperty;
import org.jems.orm.model.OrmVersionProperty;

/************************************************************/

public class JPAClass extends ClassMappingGenerator
{
	protected GeneratorUtils	m_generatorUtils;
	protected List<OrmProperty>	m_tablePropertyList;
	
	public JPAClass(Orm orm, OrmEntity ormEntity, List<OrmProperty> tablePropertyList)
	{
		super(orm, ormEntity);
		
		m_tablePropertyList = tablePropertyList;
		m_generatorUtils = new GeneratorUtils();
	}

	/************************************************************/
	/* public methods */
	/************************************************************/
	/** generate */

	public void generate(PrintStream out) throws IOException, GeneratorException
	{
	String className = m_ormEntity.getClassName();
	String simpleClassName = m_generatorUtils.getSimpleClassName(className);
	String extension = "";
	
		if (!m_ormEntity.getParentClassName().equals(""))
		{
			extension = " extends "+m_ormEntity.getParentClassName();
		}
	<template>/*******************************************************************/
/*
	File: <%out.print(simpleClassName);%>.java
*/
/*******************************************************************/

package <%out.print(m_generatorUtils.getPackageName(className));%>;

import java.io.Serializable;

<%
	generateImports(out);

	out.println("");
	
	if (m_ormEntity.isSuperClass())
	{
		out.print("@MappedSuperclass");
	}
	else
	{
		out.print("@Entity");
	}
%>
public class <%out.print(simpleClassName+extension);%> implements Serializable
{
<%generateProperties(out);%>	private static final long serialVersionUID = 1L;

	public <%out.print(simpleClassName);%>() {}

<%generateMethods(out);%>
} // <%out.print(simpleClassName);%>

/*******************************************************************/
// End of file
/*******************************************************************/
</template>

	} // generate
	
	/************************************************************/
	/* protected methods */
	/************************************************************/
	/** generateImports */
	
	protected void generateImports(PrintStream out)
	{
	List<String> imports = new ArrayList<String>();
	
		if (m_ormEntity.isSuperClass())
		{
			imports.add("javax.persistence.MappedSuperclass");
		}
		else
		{
			imports.add("javax.persistence.Entity");
		}
		
		OrmId ormId = m_ormEntity.getOrmId();
		
		if (ormId != null)
		{
			imports.add("javax.persistence.Id");
			imports.add("javax.persistence.GeneratedValue");
			imports.add("javax.persistence.GenerationType");
		}
		
		imports.add("javax.persistence.Column");
		
		if (m_ormEntity.getOrmOneToOneProperty().length > 0)
		{
			imports.add("javax.persistence.OneToOne");
		}
		
		if (m_ormEntity.getOrmOneToManyProperty().length > 0)
		{
			imports.add("javax.persistence.OneToMany");
		}
		
		if (m_ormEntity.getOrmManyToManyProperty().length > 0)
		{
			imports.add("javax.persistence.ManyToMany");
		}
		
		if (m_ormEntity.getOrmManyToOneProperty().length > 0)
		{
			imports.add("javax.persistence.ManyToOne");
		}
		
		if (m_ormEntity.getOrmTransientProperty().length > 0)
		{
			imports.add("javax.persistence.Transient");
		}
		
		if (m_ormEntity.getOrmVersionProperty().length > 0)
		{
			imports.add("javax.persistence.Version");
		}
		
		if (m_ormEntity.getOrmEmbeddedProperty().length > 0)
		{
			imports.add("javax.persistence.Embedded");
		}
		
		Collections.sort(imports);
		
		for (String importName : imports)
		{
			out.println("import "+importName+";");
		}
		
	} // generateImports
	
	/************************************************************/
	/** generateMethods */
	
	protected void generateMethods(PrintStream out)
	{
	} // generateMethods
	
	/************************************************************/
	/** generateOrmProperty */
	
	protected void generateOrmProperty(PrintStream out, OrmProperty ormProperty)
	{
	String columnName = ormProperty.getColumnName();
	
		if (columnName.equals(""))
		{
			columnName = ormProperty.getName();
		}
		out.println("\t@Column(name=\""+columnName+
					"\", nullable="+ormProperty.getNullable()+")");
					
	} // generateOrmProperty
	
	/************************************************************/
	/** generateProperties */
	
	protected void generateProperties(PrintStream out)
	{
	OrmId ormId = m_ormEntity.getOrmId();
		
		if (ormId != null)
		{
		String generator = ormId.getGenerator();
		
			out.println("\t@Id");
			out.println("\t@Column(name=\""+ormId.getName()+
						"\", nullable=false)");
						
			if (generator.equals(""))
			{
				generator = "IDENTITY";;
			}
			
    		out.println("\t@GeneratedValue(strategy = GenerationType."+generator+")");
    		out.println("\tprotected long\t\t"+ormId.getName()+";");
			out.println("");
		}
		
		for (OrmProperty ormProperty : m_tablePropertyList)
		{
			if (!isMappedProperty(ormProperty.getName()))
			{
				; // TODO generateOrmProperty(out, ormProperty);
			}
		}
		
	} // generateProperties
	
} // JPAClass

/************************************************************/


