/************************************************************/
/*
	File: JPAClass.java

	Template for JPA Class mapping.

	Author: James Cowan
*/
/************************************************************/

package org.jems.orm;

import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.jems.generator.GeneratorException;

import org.jems.orm.model.Orm;
import org.jems.orm.model.OrmAssociationProperty;
import org.jems.orm.model.OrmBasicProperty;
import org.jems.orm.model.OrmEntity;
import org.jems.orm.model.OrmId;
import org.jems.orm.model.OrmJoin;
import org.jems.orm.model.OrmOneToManyProperty;
import org.jems.orm.model.OrmManyToManyProperty;
import org.jems.orm.model.OrmProperty;
import org.jems.orm.model.OrmVersionProperty;

/************************************************************/

public class JPAClass extends ClassMappingGenerator
{
	protected GeneratorUtils	m_generatorUtils;
	protected List<OrmProperty>	m_tablePropertyList;
	
	public JPAClass(Orm orm, OrmEntity ormEntity, List<OrmProperty> tablePropertyList)
	{
		super(orm, ormEntity);
		
		m_tablePropertyList = tablePropertyList;
		m_generatorUtils = new GeneratorUtils();
	}

	/************************************************************/
	/* public methods */
	/************************************************************/
	/** generate */

	public void generate(PrintStream out) throws IOException, GeneratorException
	{
	String className = m_ormEntity.getClassName();
	String simpleClassName = m_generatorUtils.getSimpleClassName(className);
	String extension = "";
	
		if (!m_ormEntity.getParentClassName().equals(""))
		{
			extension = " extends "+m_ormEntity.getParentClassName();
		}
	<template>/*******************************************************************/
/*
	File: <%out.print(simpleClassName);%>.java
*/
/*******************************************************************/

package <%out.print(m_generatorUtils.getPackageName(className));%>;

import java.io.Serializable;

<%
	generateImports(out);

	out.println("");
	
	if (m_ormEntity.isSuperClass())
	{
		out.print("@MappedSuperclass");
	}
	else
	{
		out.print("@Entity");
	}
%>
public class <%out.print(simpleClassName+extension);%> implements Serializable
{
<%generateProperties(out);%>	private static final long serialVersionUID = 1L;

	public <%out.print(simpleClassName);%>() {}

<%generateMethods(out);%>
} // <%out.print(simpleClassName);%>

/*******************************************************************/
// End of file
/*******************************************************************/
</template>

	} // generate
	
	/************************************************************/
	/* protected methods */
	/************************************************************/
	/** addAssociationImport */
	
	protected void addAssociationImport(List<String> imports, OrmAssociationProperty ormAssociationProperties[])
	{
		for (int count=0; count<ormAssociationProperties.length; count++)
		{
		OrmAssociationProperty ormAssociationProperty = ormAssociationProperties[count];
		OrmJoin ormJoin = ormAssociationProperty.getOrmJoin();
		
			addImport(imports, "javax.persistence.FetchType");
			
			if (!ormAssociationProperty.getCascade().equals(""))
			{
				addImport(imports, "javax.persistence.CascadeType");
			}
			
			if (!ormAssociationProperty.getOrderColumn().equals(""))
			{
				addImport(imports, "javax.persistence.OrderColumn");
			}
			if (ormJoin.getJoinColumn().length > 0)
			{
				addImport(imports, "javax.persistence.JoinColumn");
			}
			
			if (ormAssociationProperty instanceof OrmOneToManyProperty)
			{
				addImport(imports, "java.util.List");
			}
			
			if (ormAssociationProperty instanceof OrmManyToManyProperty)
			{
			OrmManyToManyProperty ormManyToManyProperty = (OrmManyToManyProperty)ormAssociationProperty;
			
				addImport(imports, "java.util.List");
				
				if (!ormManyToManyProperty.getJoinTableName().equals(""))
				{
					addImport(imports, "javax.persistence.JoinTable");
				}
			}
		}
		
	} // addAssociationImport
	
	/************************************************************/
	/** addImport */
	
	protected void addImport(List<String> imports, String importName)
	{
		if (!imports.contains(importName))
		{
			imports.add(importName);
		}
		
	} // addImport
	
	/************************************************************/
	/** generateImports */
	
	protected void generateImports(PrintStream out)
	{
	List<String> imports = new ArrayList<String>();
	
		if (m_ormEntity.isSuperClass())
		{
			imports.add("javax.persistence.MappedSuperclass");
		}
		else
		{
			imports.add("javax.persistence.Entity");
		}
		
		OrmId ormId = m_ormEntity.getOrmId();
		
		if (ormId != null)
		{
			imports.add("javax.persistence.Id");
			imports.add("javax.persistence.GeneratedValue");
			imports.add("javax.persistence.GenerationType");
		}
		
		imports.add("javax.persistence.Column");
		
		if (m_ormEntity.getOrmOneToOneProperty().length > 0)
		{
			imports.add("javax.persistence.OneToOne");
			addAssociationImport(imports, m_ormEntity.getOrmOneToOneProperty());
		}
		
		if (m_ormEntity.getOrmOneToManyProperty().length > 0)
		{
			imports.add("javax.persistence.OneToMany");
			addAssociationImport(imports, m_ormEntity.getOrmOneToManyProperty());
		}
		
		if (m_ormEntity.getOrmManyToManyProperty().length > 0)
		{
			imports.add("javax.persistence.ManyToMany");
			addAssociationImport(imports, m_ormEntity.getOrmManyToManyProperty());
		}
		
		if (m_ormEntity.getOrmManyToOneProperty().length > 0)
		{
			imports.add("javax.persistence.ManyToOne");
			addAssociationImport(imports, m_ormEntity.getOrmManyToOneProperty());
		}
		
		if (m_ormEntity.getOrmTransientProperty().length > 0)
		{
			imports.add("javax.persistence.Transient");
		}
		
		if (m_ormEntity.getOrmVersionProperty().length > 0)
		{
			imports.add("javax.persistence.Version");
		}
		
		if (m_ormEntity.getOrmEmbeddedProperty().length > 0)
		{
			imports.add("javax.persistence.Embedded");
		}
		
		Collections.sort(imports);
		
		for (String importName : imports)
		{
			out.println("import "+importName+";");
		}
		
	} // generateImports
	
	/************************************************************/
	/** generateMethods */
	
	protected void generateMethods(PrintStream out) throws GeneratorException
	{
	OrmId ormId = m_ormEntity.getOrmId();
		
		if (ormId != null)
		{
		String id = ormId.getName();
		String methodId = toUpperFirstChar(id);
		String className = ormId.getClassName();

			out.print("\t");
			writeSeparator(out);
			out.println("\t/** get"+methodId+" */");
			out.println("");
			out.println("\tpublic "+className+" get"+methodId+"()");
			out.println("\t{");
			out.println("\t\treturn this."+id+";");
			out.println("\t}");
			out.println("");
			out.print("\t");
			writeSeparator(out);
			out.println("\t/** set"+methodId+" */");
			out.println("");
			out.println("\tpublic void set"+methodId+"("+className+" "+id+")");
			out.println("\t{");
			out.println("\t\tthis."+id+" = "+id+";");
			out.println("\t}");
		}
		
		for (OrmProperty ormProperty : m_tablePropertyList)
		{
		String name = getOrmPropertyName(ormProperty, false);
		
			if (!isMappedProperty(m_ormEntity, name))
			{
				generateOrmMethod(out, ormProperty);
			}
		}
		
		generateMethods(out, m_ormEntity.getOrmBasicProperty());
		generateMethods(out, m_ormEntity.getOrmVersionProperty());
		
		generateOrmAssociationMethod(out, false, m_ormEntity.getOrmManyToOneProperty());
		generateOrmAssociationMethod(out, false, m_ormEntity.getOrmOneToOneProperty());
		generateOrmAssociationMethod(out, true, m_ormEntity.getOrmOneToManyProperty());
		generateOrmAssociationMethod(out, true, m_ormEntity.getOrmManyToManyProperty());
		
	} // generateMethods
	
	/************************************************************/
	/** generateMethods */
	
	protected void generateMethods(PrintStream out, OrmProperty ormProperties[])
	throws GeneratorException
	{
		for (int count=0; count<ormProperties.length; count++)
		{
		OrmProperty ormProperty = ormProperties[count];
		
			generateOrmMethod(out, ormProperty);
		}
		
	} // generateMethods
	
	/************************************************************/
	/** generateOrmAssocationProperties */
	
	protected void generateOrmAssocationProperties(PrintStream out, boolean isCollection, String annotation, OrmAssociationProperty ormAssociationProperties[])
	throws GeneratorException
	{
		for (int count=0; count<ormAssociationProperties.length; count++)
		{
		OrmAssociationProperty ormAssociationProperty = ormAssociationProperties[count];
		OrmJoin ormJoin = ormAssociationProperty.getOrmJoin();
		OrmProperty joinProperties[] = ormJoin.getJoinColumn();
		String fetch = "LAZY";
		String cascade = ormAssociationProperty.getCascade();
		String mappedBy = ormAssociationProperty.getMappedBy();
			
			if (!ormAssociationProperty.getLazy())
			{
				fetch = "EAGER";
			}
					
			out.print("\t@"+annotation+"(fetch=FetchType."+fetch);
			
			if (!cascade.equals(""))
			{
				out.print(", cascade=CascadeType."+cascade);
			}
			
			if (!mappedBy.equals(""))
			{
				out.print(", mappedBy=\""+mappedBy+"\"");
			}
			
			out.println(")");
			
			if (ormAssociationProperty instanceof OrmManyToManyProperty)
			{
			OrmManyToManyProperty ormManyToManyProperty = (OrmManyToManyProperty)ormAssociationProperty;
			String joinTable = ormManyToManyProperty.getJoinTableName();
			
				if (!joinTable.equals(""))
				{
					out.println("\t@JoinTable(name=\""+joinTable+"\")");
				}
			}
			
			String indexColumn = ormAssociationProperty.getOrderColumn();
	
			if (!indexColumn.equals(""))
			{		
				out.println("@OrderColumn(name=\""+indexColumn+"\" nullable=\"false\"/>");
			}
	
			for (int index=0; index<joinProperties.length; index++)
			{
			OrmProperty ormJoinProperty = joinProperties[index];

				out.println("\t@JoinColumn(name=\""+ormJoinProperty.getName()+
							"\", nullable="+ormJoinProperty.getNullable()+")");
			}
			
			String className = m_generatorUtils.getSimpleClassName(ormAssociationProperty.getClassName());
			
			out.println("\tprotected "+className+"\t\t"+ormAssociationProperty.getName()+";");
			
		}
		
	} // generateOrmAssocationProperties
	
	/************************************************************/
	/** generateOrmAssociationMethod */
	
	protected void generateOrmAssociationMethod(PrintStream out, boolean isCollection, OrmAssociationProperty ormAssociationProperty)
	{
	String className = m_generatorUtils.getSimpleClassName(ormAssociationProperty.getClassName());
	String id = ormAssociationProperty.getName();
	String methodId = toUpperFirstChar(id);
		
		out.print("\t");
		writeSeparator(out);
		out.println("\t/** get"+methodId+" */");
		out.println("");
		if (isCollection)
		{
			out.println("\tpublic List<"+className+"> get"+methodId+"()");
		}
		else
		{
			out.println("\tpublic "+className+" get"+methodId+"()");
		}
		out.println("\t{");
		out.println("\t\treturn this."+id+";");
		out.println("\t}");
		out.println("");
		out.print("\t");
		writeSeparator(out);
		out.println("\t/** set"+methodId+" */");
		out.println("");
		if (isCollection)
		{
			out.println("\tpublic void set"+methodId+"(List<"+className+"> "+id+")");
		}
		else
		{
			out.println("\tpublic void set"+methodId+"("+className+" "+id+")");
		}
		out.println("\t{");
		out.println("\t\tthis."+id+" = "+id+";");
		out.println("\t}");
		out.println("");
		
	} // generateOrmAssociationMethod
	
	/************************************************************/
	/** generateOrmAssociationMethod */
	
	protected void generateOrmAssociationMethod(PrintStream out, boolean isCollection, OrmAssociationProperty ormAssociationProperties[])
	{
		for (int count=0; count<ormAssociationProperties.length; count++)
		{
			generateOrmAssociationMethod(out, isCollection, ormAssociationProperties[count]);
		}
		
	} // generateOrmAssociationMethod
	
	/************************************************************/
	/** generateOrmMethod */
	
	protected void generateOrmMethod(PrintStream out, OrmProperty ormProperty)
	throws GeneratorException
	{
	String methodId = getOrmPropertyName(ormProperty, true);
	String id = getOrmPropertyName(ormProperty, false);
	String className = getJavaType(ormProperty);
		
		out.print("\t");
		writeSeparator(out);
		out.println("\t/** get"+methodId+" */");
		out.println("");
		out.println("\tpublic "+className+" get"+methodId+"()");
		out.println("\t{");
		out.println("\t\treturn this."+id+";");
		out.println("\t}");
		out.println("");
		out.print("\t");
		writeSeparator(out);
		out.println("\t/** set"+methodId+" */");
		out.println("");
		out.println("\tpublic void set"+methodId+"("+className+" "+id+")");
		out.println("\t{");
		out.println("\t\tthis."+id+" = "+id+";");
		out.println("\t}");
		out.println("");
		
	} // generateOrmMethod
	
	/************************************************************/
	/** generateOrmProperty */
	
	protected void generateOrmProperty(PrintStream out, OrmProperty ormProperty, boolean isVersion)
	throws GeneratorException
	{
	String columnName = getOrmPropertyName(ormProperty, false);
	String lengthS = "";
		
		if (isStringProperty(ormProperty))
		{
			lengthS = ", length="+ormProperty.getColumnSize();
		}
		
		if (isVersion)
		{
			out.println("\t@Transient");
		}
		
		out.println("\t@Column(name=\""+columnName+
					"\", nullable="+ormProperty.getNullable()+lengthS+")");
		out.println("\tprotected "+getJavaType(ormProperty)+"\t\t"+columnName+";");
					
	} // generateOrmProperty
	
	/************************************************************/
	/** generateProperties */
	
	protected void generateProperties(PrintStream out)
	throws GeneratorException
	{
	OrmId ormId = m_ormEntity.getOrmId();
		
		if (ormId != null)
		{
		String generator = ormId.getGenerator();
		String name = ormId.getName();
		
			out.println("\t@Id");
			out.println("\t@Column(name=\""+name+"\", nullable=false)");
						
			if (generator.equals(""))
			{
				generator = "IDENTITY";
			}
			
    		out.println("\t@GeneratedValue(strategy = GenerationType."+generator+")");
    		out.println("\tprotected "+ormId.getClassName()+"\t\t"+name+";");
			out.println("");
		}
		
		for (OrmProperty ormProperty : m_tablePropertyList)
		{
		String name = getOrmPropertyName(ormProperty, false);
		
			if (!isMappedProperty(m_ormEntity, name))
			{
				generateOrmProperty(out, ormProperty, false);
			}
		}
		
		OrmBasicProperty ormBasicProperties[] = m_ormEntity.getOrmBasicProperty();
		
		for (int count=0; count<ormBasicProperties.length; count++)
		{
		OrmBasicProperty ormBasicProperty = ormBasicProperties[count];
		
			generateOrmProperty(out, ormBasicProperty, false);
		}
		
		OrmVersionProperty ormVersionProperties[] = m_ormEntity.getOrmVersionProperty();
		
		for (int count=0; count<ormVersionProperties.length; count++)
		{
		OrmProperty ormVersionProperty = ormVersionProperties[count];
		
			generateOrmProperty(out, ormVersionProperty, true);
		}
		
		generateOrmAssocationProperties(out, false, "ManyToOne", m_ormEntity.getOrmManyToOneProperty());
		generateOrmAssocationProperties(out, false, "OneToOne", m_ormEntity.getOrmOneToOneProperty());
		generateOrmAssocationProperties(out, true, "OneToMany", m_ormEntity.getOrmOneToManyProperty());
		generateOrmAssocationProperties(out, true, "ManyToMany", m_ormEntity.getOrmManyToManyProperty());
		
	} // generateProperties
	
	/************************************************************/
	/** getOrmPropertyName */
	
	protected String getOrmPropertyName(OrmProperty ormProperty, boolean toUpper)
	throws GeneratorException
	{
	String name = ormProperty.getName();
	
		if (name.equals(""))
		{
			name = ormProperty.getColumnName();
			
			if (name.equals(""))
			{
				throw new GeneratorException("Property without name");
			}
		}
		
		if (!toUpper)
		{
			return name;
		}
		
		return toUpperFirstChar(name);
		
	} // getOrmPropertyName
	
	/************************************************************/
	/** toUpperFirstChar */
	
	protected String toUpperFirstChar(String name)
	{
		return name.substring(0,1).toUpperCase()+name.substring(1);
		
	} // toUpperFirstChar
	
	/************************************************************/
	/** writeSeparator */
	
	protected void writeSeparator(PrintStream out)
	{
		out.println("/*******************************************************************/");
		
	} // writeSeparator
	
} // JPAClass

/************************************************************/


