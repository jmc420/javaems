/************************************************************/
/*
	File: JavaToAS3Compiler.java

	JavaToAS3Compiler compiles Java beans to AS3 beans.

	Author: James Cowan
*/
/************************************************************/

package org.jems.compiler;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;

import org.jems.compiler.model.JavaClass;
import org.jems.compiler.model.TypeDescriptorList;
import org.jems.generator.Generator;
import org.jems.generator.GeneratorException;

/************************************************************/

public class JavaToAS3Compiler extends JavaCompiler
{
	protected TypeDescriptorList	m_typeDescriptorList;
	
	public JavaToAS3Compiler(File schemaDirectory, File schemaFile, File output)
	throws GeneratorException
	{
		super(schemaDirectory, schemaFile, output);
		
		m_typeDescriptorList = getTypeDescriptorList();
	}

	/************************************************************/
	/* public methods */
	/************************************************************/

	
	/************************************************************/
	/* protected methods */
	/************************************************************/
	/** compileClassList */
	
	protected void compileClassList() throws IOException, GeneratorException
	{
	JavaClass javaClasses[] = m_javaClassList.getJavaClass();
	long schemaFileDate = m_schemaFile.lastModified();
	
		for (int count=0; count<javaClasses.length; count++)
		{
		JavaClass javaClass = javaClasses[count];
		Class<?> cl = getJavaClass(javaClass);
		File dir = Generator.createPackageDir(m_output, cl.getPackage().getName());
		File file = new File(dir, cl.getSimpleName()+".as");
		long fileDate = file.lastModified();
		
			if (false && file.exists() && fileDate >= schemaFileDate)
			{
				m_log.info(file.getAbsolutePath()+" is up to date");
				continue;
			}
			
			FileOutputStream fos = new FileOutputStream(file);
			PrintStream ps = new PrintStream(fos);
			AS3ClassGenerator as3ClassGenerator = new AS3ClassGenerator(javaClass, cl, m_typeDescriptorList);
		
			m_log.info("Create as3 class: "+file.getAbsolutePath());
		
			as3ClassGenerator.generate(ps);
			ps.close();
		}
		
	} // compileClassList
	
	/************************************************************/
	/** getTypeDescriptorList */
	
	protected TypeDescriptorList getTypeDescriptorList()throws GeneratorException
	{	
	String fileName = "/as3types.xml";
	
        try
        {
        InputStream in = getClass().getResourceAsStream(fileName);
        InputStreamReader reader = new InputStreamReader(in);

			return TypeDescriptorList.unmarshalTypeDescriptorList(reader);
        }
        catch (Throwable e)
        {
        String msg = "Cannot read "+fileName+": "+e.getMessage();
        	
        	throw new GeneratorException(msg);
        }
        	
	} // getTypeDescriptorList
	
} // JavaToAS3Compiler

/************************************************************/


